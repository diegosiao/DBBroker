-- Create user and grant privileges
CREATE USER DBBROKER IDENTIFIED BY password DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp;
GRANT CONNECT, RESOURCE TO DBBROKER;

-- Connect to the new schema
ALTER SESSION SET CURRENT_SCHEMA = DBBROKER;

-- Create the sequences and triggers for auto-increment
CREATE SEQUENCE CUSTOMERS_NOTES_STATUS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE ORDERS_NOTES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE ORDER_STATUS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE PROMOTIONS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE PROMOTIONS_ENROLLMENTS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;

-- Create the tables
CREATE TABLE CUSTOMERS (
    ID RAW(16) PRIMARY KEY,
    NAME VARCHAR2(250) NOT NULL,
    BIRTHDAY DATE,
    ORDERS_TOTAL NUMBER,
    CREATED_AT TIMESTAMP NOT NULL,
    CREATED_BY VARCHAR2(50) NOT NULL,
    MODIFIED_AT TIMESTAMP,
    MODIFIED_BY VARCHAR2(50)
);

CREATE TABLE CUSTOMERS_NOTES_STATUS (
    ID NUMBER PRIMARY KEY,
    STATUS VARCHAR2(50)
);

CREATE TABLE CUSTOMERS_NOTES (
    ID RAW(16) PRIMARY KEY,
    CUSTOMER_ID RAW(16),
    STATUS_ID NUMBER,
    NOTE_CONTENT VARCHAR2(50) NOT NULL,
    CONSTRAINT FK_CUSTOMERS_NOTES_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
    CONSTRAINT FK_CUSTOMERS_NOTES_STATUS_ID FOREIGN KEY (STATUS_ID) REFERENCES CUSTOMERS_NOTES_STATUS(ID)
);

CREATE TABLE ORDER_STATUS (
    ID NUMBER PRIMARY KEY,
    STATUS VARCHAR2(50) NOT NULL
);

CREATE TABLE ORDERS (
    ID RAW(16) PRIMARY KEY,
    CUSTOMER_ID RAW(16) NOT NULL,
    STATUS_ID NUMBER,
    CREATED_AT TIMESTAMP NOT NULL,
    CREATED_BY VARCHAR2(50) NOT NULL,
    MODIFIED_AT TIMESTAMP,
    MODIFIED_BY VARCHAR2(50),
    CONSTRAINT FK_ORDERS_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
    CONSTRAINT FK_ORDERS_STATUS_ID FOREIGN KEY (STATUS_ID) REFERENCES ORDER_STATUS(ID)
);

CREATE TABLE ORDERS_NOTES (
    ID NUMBER PRIMARY KEY,
    NOTE_CONTENT VARCHAR2(1024) NOT NULL
);

CREATE TABLE PRODUCTS (
    ID RAW(16) PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(50) NOT NULL
);

CREATE TABLE ORDERS_PRODUCTS (
    ID RAW(16) PRIMARY KEY,
    ORDER_ID RAW(16) NOT NULL,
    PRODUCT_ID RAW(16) NOT NULL,
    CONSTRAINT FK_ORDERS_PRODUCTS_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID),
    CONSTRAINT FK_ORDERS_PRODUCTS_PRODUCT_ID FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
);

CREATE TABLE PROMOTIONS (
    ID NUMBER PRIMARY KEY,
    TITLE VARCHAR2(50) NOT NULL,
    EXPIRATION TIMESTAMP NOT NULL
);

CREATE TABLE PROMOTIONS_ENROLLMENTS (
    ID NUMBER PRIMARY KEY,
    CUSTOMER_ID RAW(16) NOT NULL,
    PROMOTION_ID NUMBER NOT NULL,
    CONSTRAINT FK_PROMO_ENRO_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID),
    CONSTRAINT FK_PROMO_ENRO_PROMOTION_ID FOREIGN KEY (PROMOTION_ID) REFERENCES PROMOTIONS(ID)
);

-- Add a comment to the primary key column
COMMENT ON COLUMN CUSTOMERS.ID IS 'Primary key';

-- Create triggers for auto-increment fields
/* CREATE TRIGGER TRG_CUSTOMERS_NOTES_STATUS_BI
BEFORE INSERT ON CUSTOMERS_NOTES_STATUS
FOR EACH ROW
BEGIN
    :NEW.ID := CUSTOMERS_NOTES_STATUS_SEQ.NEXTVAL;
END;
/

CREATE TRIGGER TRG_ORDERS_NOTES_BI
BEFORE INSERT ON ORDERS_NOTES
FOR EACH ROW
BEGIN
    :NEW.ID := ORDERS_NOTES_SEQ.NEXTVAL;
END;
/

CREATE TRIGGER TRG_ORDER_STATUS_BI
BEFORE INSERT ON ORDER_STATUS
FOR EACH ROW
BEGIN
    :NEW.ID := ORDER_STATUS_SEQ.NEXTVAL;
END;
/

CREATE TRIGGER TRG_PROMOTIONS_BI
BEFORE INSERT ON PROMOTIONS
FOR EACH ROW
BEGIN
    :NEW.ID := PROMOTIONS_SEQ.NEXTVAL;
END;
/

CREATE TRIGGER TRG_PROMOTIONS_ENROLLMENTS_BI
BEFORE INSERT ON PROMOTIONS_ENROLLMENTS
FOR EACH ROW
BEGIN
    :NEW.ID := PROMOTIONS_ENROLLMENTS_SEQ.NEXTVAL;
END;
/ */
