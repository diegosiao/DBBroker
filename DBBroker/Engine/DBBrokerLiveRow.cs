using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Text;

namespace DBBroker.Engine
{
    /// <summary>
    /// <para>This class represents a single row of the first result set returned by the SQL script executed by the static method <see cref="DBBrokerLive"/>.ExecCmdSQL().</para>
    /// <para>You can access the values of the row represented by an instance of this class by index, column name, or one of the Get() methods. E.g.: dbbroker_live_row["personame"]</para> 
    /// </summary>
    public class DBBrokerLiveRow
    {
        /// <summary>
        /// The alias given to the entity formed by the SQL script that generated this object.
        /// </summary>
        public string EntityName { get; private set; }

        /// <summary>
        /// All columns returned by the SQL command that generated this object.
        /// </summary>
        public ReadOnlyCollection<string> ColumnNames
        {
            get
            {
                return column_names != null ? column_names.AsReadOnly() : null;
            }
        }

        private List<string> column_names { get; set; }

        private Dictionary<int, object> fields { get; set; }

        internal DBBrokerLiveRow(string[] columns, string entity)
        {
            EntityName = entity;
            column_names = new List<string>(columns);

            fields = new Dictionary<int, object>();
            for (int i = 0; i < columns.Length; i++)
                fields.Add(i, null);
        }

        /// <summary>
        /// Get the value by column name. The first occurrence will be considered.
        /// </summary>
        /// <param name="column_name"></param>
        /// <returns></returns>
        public object Get(string column_name)
        {
            return this[column_name];
        }

        /// <summary>
        /// Get the value by column index. 
        /// </summary>
        /// <param name="column_index"></param>
        /// <returns></returns>
        public object Get(int column_index)
        {
            return this[column_index];
        }

        /// <summary>
        /// Get the value by column name casting it as the specified type parameter.
        /// </summary>
        /// <typeparam name="T">The type to the value of the specified column name.</typeparam>
        /// <param name="column_name">
        /// Column name in the result generated by the SQL. The first occurrence will be considered.
        /// </param>
        /// <returns></returns>
        public T Get<T>(string column_name)
        {
            if (this[column_name] == null)
                return default(T);

            T obj = default(T);

            try
            {
                return (T)this[column_name];
            }
            catch { }

            return obj;
        }

        /// <summary>
        /// Get the value by column index casting it as the specified type parameter.
        /// </summary>
        /// <typeparam name="T">The type to the value of the specified column index.</typeparam>
        /// <param name="column_index">
        /// Column name in the result generated by the SQL. The first occurrence will be considered.
        /// </param>
        /// <returns></returns>
        public T Get<T>(int column_index)
        {
            if (this[column_index] == null)
                return default(T);

            T obj = default(T);

            try
            {
                return (T)this[column_index];
            }
            catch { }

            return obj;
        }

        /// <summary>
        /// Get the value by column name. The first occurrence of the name will be considered.
        /// </summary>
        /// <param name="column_name">The name of the column to get the value.</param>
        /// <returns>The object correspondent to column name specified</returns>
        public object this[string column_name]
        {
            get
            {
                if (string.IsNullOrEmpty(column_name))
                    throw new DBBrokerException(Properties.Resources.NullOrEmptyColumnName);

                int column_index = -1;
                for (int i = 0; i < column_names.Count; i++)
                    if (ColumnNames[i].ToLower().Equals(column_name.ToLower()))
                    {
                        column_index = i;
                        break;
                    }

                if (column_index == -1 && Debugger.IsAttached)
                    Debugger.Log(1, "WARNING", string.Format("(DBBroker) Column not found: '{0}'.\r\n", column_name));

                return column_index == -1 ? null : fields[column_index];
            }
        }

        /// <summary>
        /// Get the value by column index. 
        /// </summary>
        /// <param name="column_index">The zero-based index of the column to get the value.</param>
        /// <returns>The object correspondent to column index specified.</returns>
        public object this[int column_index]
        {
            get
            {
                return fields[column_index];
            }
            internal set
            {
                fields[column_index] = value;
            }
        }
    }
}
